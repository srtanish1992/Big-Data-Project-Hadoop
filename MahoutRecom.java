package com.neu;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.apache.mahout.cf.taste.common.TasteException;
import org.apache.mahout.cf.taste.eval.RecommenderBuilder;
import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity;
import org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity;
import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
import org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.recommender.Recommender;
import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;

public class MahoutRecom {

    public static void main(String[] args) {

        try {

            DataModel model = new AlphaItemFileDataModel(new File("/home/anish/BigData/Project/DataSet/mahout.csv"));


            // to retrieve the string or real data from indexes which are generated by custom file model
            retrieveDataFromIndex dataretriever;

            // the map of long to string(real data) will be in - memory you can even implement it to write the indexes in file and you read file later
            // if want to changes from indexes to string.

            dataretriever = new retrieveDataFromIndex(((AlphaItemFileDataModel) model).getIndexedMapInstansce());

            ItemSimilarity sim = new LogLikelihoodSimilarity(model);

            System.out.println("Item based recommendation");

            System.out.println("");

            GenericItemBasedRecommender recommenderItem = new GenericItemBasedRecommender(model, sim);

            int y = 1;

                for (LongPrimitiveIterator items = model.getItemIDs(); items.hasNext();) {

                    long itemId = items.nextLong();

                    List<RecommendedItem> recommendations = recommenderItem.mostSimilarItems(itemId, 5);

                    for (RecommendedItem recommendation : recommendations) {
                        System.out.println(dataretriever.getDataBack(itemId) + "," + dataretriever.getDataBack(recommendation.getItemID()) + "," + recommendation.getValue());
                    }

                    y++;
                    if (y > 10) break;

            }

            RecommenderBuilder recommenderBuilder = new RecommenderBuilder() {
                public Recommender buildRecommender(DataModel model) throws TasteException {

                    UserSimilarity similarity = new LogLikelihoodSimilarity(model);

                    UserNeighborhood neighborhood = new NearestNUserNeighborhood (100, similarity, model);

                    return new GenericUserBasedRecommender(model, neighborhood,similarity);
                }
            };

            System.out.println("");

            System.out.println("User based recommendation");

            System.out.println("");

            Recommender recommender = recommenderBuilder.buildRecommender(model);

            int x = 1;

            for (LongPrimitiveIterator users = model.getUserIDs(); users.hasNext();) {

                long userId = users.nextLong();


                List<RecommendedItem> recomendations = recommender.recommend(userId,5);

                for (RecommendedItem recommendation : recomendations) {
                    System.out.println(dataretriever.getDataBack(userId) + "," + dataretriever.getDataBack(recommendation.getItemID()) + "," + recommendation.getValue());
                }

                x++;
                if (x > 10) System.exit(1);

            }


        } catch (IOException ex) {
            System.out.println("Exception: " + ex.getMessage());
        } catch (TasteException ex) {
            System.out.println("Exception: " + ex.getMessage());
        }


    }
}
